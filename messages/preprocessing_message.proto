syntax = "proto3";

package com.grammatek.preprocessing;
option go_package = "com.grammatek/preprocessing";

//
// Messages for TTS frontend pipeline, containing requests and responses for different requirements:
//   - a complete text preprocessing pipeline returning a phonetic representation of the input
//   - normalizer request, returning a tts-normalized version of the input
//   - text-cleaning request, returning a cleaned version of the input, i.e. the input without any non-valid characters
//   and where defined sets of characters have been replaced by other characters
//   - g2p request, returning a phonetic representation of the input
//
//   Some parameters:
//   - for text-cleaning, parameters that deviate from the default settings can be included in the request message
//   - for complete pipeline and normalizing, the normalizer domain can be included in the request message, as well
//   as a boolean to indicate if a spell checker should be run on the normalized output
//   - for complete pipeline and g2p, parameters for g2p can be included in the message: which alphabet should be used
//   and if the transcripts should be syllabified and contain stress labels
//

// Request a complete preprocessing pipeline from raw text to phonetic representation
message PreprocessRequest {
  // The input string to process. This string can represent an html-epub element, make sure then to set
  // parse_html = True in norm_request. In the default case the preprocessing pipeline expects raw text.
  string content = 1;
  // Settings for the text cleaning and normalization module.
  NormalizeRequest norm_request = 2;
  // Settings for the transcription module.
  PhonemeDescription description = 4;
  // A user defined pronunciation dictionary. If a key in this dictionary exists in the default dictionary,
  // the user defined transcription will override the default transcription. Be careful to use the
  // same transcription system and the same dialect as defined in the phonemeDescription!
  // The custom pronunciation dictionary should contain plain transcriptions, e.g. no syllabification or stress,
  // as those are added automatically
  map<string, string> pronunciation_dict = 5;
  // TagTokens represent tags like '<sil>'. Those might not be wanted in the content response,
  // if a phonetic transcription only is wanted set the following to True. Default is False.
  // The TagTokens will always be accessible in the token list response.
  bool no_tag_tokens_in_content = 6;
  bool parse_html = 7;

  // The language identification (ISO 639 code for the language name - ISO 3166 country code)
  // for specifying the synthesis language.
  // Default: is-IS
  string language_code = 10;
}

// The response message resulting from a preprocessRequest
message PreprocessedResponse {
  // The processed input as a list of strings representing sentences or max TTS processing chunks of tokens.
  // Depending on the settings in the request, the processed_content string will contain tag tokens or not.
  repeated string processed_content = 1;
  // The processed input as a list of tokens, containing the processing history step by step. The token list
  // always contains the tag tokens, regardless of the settings in the request.
  repeated TokenList tokens = 2;
  // TODO: do we need this here in the response?
  PhonemeDescription description = 3;
}

// A list of tokens and tagTokens, embedded in a preprocessedResponse
message TokenList {
  oneof tokens {
    Token token = 1;
    TagToken tag = 2;
  }
}

// Request phonetic transcription of the input text. Same response as PreprocessRequest.
// Only use G2PRequest for input that you know that is normalized for the G2P module.
message G2PRequest {
  // The input string to transcribe. The string needs to be normalized for g2p
  string content = 1;
  // Settings for the transcription module
  PhonemeDescription description = 2;

  // The language identification (ISO 639 code for the language name - ISO 3166 country code)
  // for specifying the synthesis language.
  // Default: is-IS
  string language_code = 7;
}

// Request a normalizer pipeline from raw text to tts-normalized text.
message NormalizeRequest {
  // The input string to process. This string can represent an html-epub element, make sure then to set
  // parse_html = True. In the default case the normalizer pipeline expects raw text.
  string content = 1;
  TextCleanerParams cleaner_params = 2;
  NormalizationDomain domain = 3;
  // if true, a spell corrector will be run over the normalized text. Default: False
  bool do_spellcorrect = 4;
  // If true, sentence boundaries will be labelled, and also inserted into very long sentences, i.e.
  // sentences that extend the maximum number of tokens. Default: False.
  bool sentence_split = 5;
  // If phrasing is set to True, the phrasing module will be invoked and extra pause tags inserted where applicable.
  // Phrasing improves results of sentence_split if sentences need to be split up, this is best done on
  // phrase boundaries. However, currently phrasing is a bit resource intensive and thus slows the pipeline down.
  // Default: False.
  bool phrasing = 6;
  // TagTokens represent tags like '<sil>'. Those might not be wanted in the content response,
  // if a phonetic transcription only is wanted set the following to True. Default is False.
  // The TagTokens will always be accessible in the token list response.
  bool no_tag_tokens_in_content = 7;
  // Max tokens in chunk. If a sentence extends this number, a sentence boundary label will be inserted in a
  // sensible position within the sentence if sentence_split == True. A sensible number of tokens is 30, make sure
  // to set a value for max_characters_in_chunk if sentence_split == True!
  // Default is 0.
  int32 max_characters_in_chunk = 8;
  // If the content should be parsed as html before cleaning, parse_html is True, default is False
  bool parse_html = 9;
  // The language identification (ISO 639 code for the language name - ISO 3166 country code)
  // for specifying the synthesis language.
  // Default: is-IS
  string language_code = 10;
}

// The response message resulting from a normalizeRequest
message NormalizedResponse {
  // the normalized input as a list of strings representing sentences or max TTS processing chunks of tokens
  repeated string processed_content = 1;
  // the processed input as a list of tokens, containing the processing history step by step
  repeated TokenList tokens = 2;
  // TODO: do we need this in the response? Already present in the request, values do not change
  NormalizationDomain domain = 3;
  bool is_spellcorrected = 4;
}

// Request text cleaning from raw text to clean text.
message TextCleanRequest {
  // The input string to process. This string can represent an html-epub element, make sure then to set
  // parse_html = True. In the default case the text cleaner expects raw text.
  string content = 1;
  // if text cleaner should deviate from default settings, set the corresponding parameters
  TextCleanerParams params = 2;
  // if the content should be parsed as html before cleaning, parse_html is True, default is False
  bool parse_html = 3;

  // The language identification (ISO 639 code for the language name - ISO 3166 country code)
  // for specifying the synthesis language.
  // Default: is-IS
  string language_code = 7;
}

// The response message resulting from a textCleanRequest
message TextCleanResponse {
  // The cleaned input string as string. Note that the text cleaner does not return a list of strings (repeated),
  // since the text cleaner does not perform sentence detection.
  string processed_content = 1;
  // The cleaned input as a list of tokens, containing the original and the clean version of each token,
  // plus tagTokens, if any were added.
  repeated TokenList tokens = 2;
}

// Default parameters/settings for the processing modules: text cleaner, normalizer and transcriber (g2)
message DefaultProcessingResponse {
  NormalizeRequest normalization_params = 1;
  PhonemeDescription phoneme_description = 2;
}

// The information on a processed token from an input text.
message Token {
  // the token string
  string name = 1;
  // cleaned token string
  string clean = 2;
  // token tokenized by the tts-tokenizer which might have splitted up the original token
  repeated string tokenized = 3;
  // normalized version of the token string
  repeated NormalizedToken normalized = 4;
  // transcribed version of the token string
  repeated TranscribedToken transcribed = 5;
  // index of the token in the original text
  int32 index = 6;
  // char index in original text
  int32 span_from = 7;
  // last char index, excluding, in original text
  int32 span_to = 8;
}

// Normalized token. Field 'name' should not contain any digits or symbols not processable by a g2p module.
// A normalized token might have been processed by a spell checker.
message NormalizedToken {
  // the normalized version of the token
  string normalized_string = 1;
  // the part-of-speech tag for the normalized token
  string pos = 2;
  // if the normalized token has been spell corrected, is_spellcorrected is True, default is False
  bool is_spellcorrected = 3;
  // the domain used to normalize, default is "other"
  NormalizationDomain domain = 4;
}

// Transcribed token. Field 'name' is a phonetic representation of a normalizedToken.
message TranscribedToken {
  // the transcribed version of the token
  string name = 1;
  PhonemeDescription description = 2;
}

// Tag token. Representing an SSML or another kind of xml-tag.
// If both start and end are set to False (default), the token is a stand-alone tag without a
// corresponding closing tag.
message TagToken {
  // label of the tag
  string name = 1;
  int32 index = 2;
  // default: False
  bool ssml_start = 3;
  // default: False
  bool ssml_end = 4;
}

/*
  Parameter messages for different requests
 */

// Parameters for the text cleaner. Default values are given for each field, thus
// only necessary to provide these parameters if the deviate from the defaults.
 message TextCleanerParams {
  // change the default replacement of emojis
  // default: '.'
  EmojiReplacement emoji_replacement = 1;
  // add char or string replacements extending default replacements in the text cleaner
  // default: empty map
  map<string, string> char_replacement = 2;
  // add a common replacement for all common punctuation marks
  // default: '' (punctuation marks ['.',',',':','!','?'] not replaced)
  string punct_replacement = 3;
  // define valid characters, default is the Icelandic alphabet
  // default: None (empty)
  repeated string alphabet= 4;
  // define punctuation chars to preserve, default is: ['.',',',':','!','?']
  // default: None (empty)
  repeated string punct_set = 5;
  // define certain chars or strings to preserve regardless of what chars or symbols they contain
  // default: None (empty)
  repeated string preserve_string = 6;
  // if True, don't replace emojis
  // default: False
  bool preserve_emojis = 7;
  // if True, replace emojis with their description instead of a '.'
  // default: False
  bool clean_emojis = 8;
  // if True, delete text labelled as foreign. Default behaviour is to add an SSML-lang tag around
  // text labelled as foreign
  // default: False
  bool delete_labelled_translations = 9;
}

message EmojiReplacement {
  // replacement string for emojis, default is '.'
  string replacement = 1;
}

// Parameters for requests containing g2p.
// Describes the phoneme string: alphabet, output format, syllabification and labeling.
// Default: X-SAMPA in plain format without syllabification, stress labeling, and word separators.
//
// Examples
//      input string 'hljóðritaður texti' (e. 'phonetically transcribed text'):
//      Default: 'l_0 j ou D r I t a D Y r t_h E k s t I'
//      SAMPA, syllabified, stress labels, word separated ('-'):
//          'l_0 j ou1 D . r I0 . t a0 . D Y0 r - t_h E1 k s . t I0'
//      SAMPA, CMU format:
//          ("hljóðritaður" nil (((l_0 j ou D ) 1) ((r I ) 0) ((t a ) 0) ((D Y r ) 0))) ("texti" nil (((t_h E k s ) 1) ((t I ) 0)))
message PhonemeDescription {
  // phoneme alphabet (IPA, SAMPA, ...)
  PhoneticAlphabet alphabet = 1;
  // The format of the phoneme string (CMU, plain, ...)
  PhonemeFormat format = 2;
  // Dialect to use when transcribing
  Dialect dialect = 3;
  // g2p model to use, default is LSTM
  G2PModel model = 4;
  // Which symbol to use as a syllable separator. Default is empty string which means no syllabification will
  // be performed
  string syllabified = 5;
  // Label syllables with stress, default is False
  bool stress_labels = 6;
  // Which symbol to use as a word separator. Default is empty string which means do not use a word separator
  // The symbol can be the same as the syllable symbol, if that is what the TTS model accepts
  string word_separator = 7;
}

// Domain for the normalizer. Currently a general domain and the sports domain are supported, the difference
// being the handling of '-' between digits as in '5-7': general domain: 'fimm til sjö', sports domain: 'fimm <sil> sjö'.
message NormalizationDomain {
  Domain norm_domain = 1;
}


// Parameters for requests containing normalization.
// Possible normalization domains.
// Default: NORM_DOMAIN_OTHER
enum Domain {
  NORM_DOMAIN_INVALID = 0;
  NORM_DOMAIN_SPORT = 1;
  NORM_DOMAIN_OTHER = 2;
}

// Phonetic Alphabet
// Default: PHONETIC_ALPHABET_SAMPA
enum PhoneticAlphabet {
  PHONETIC_ALPHABET_INVALID = 0;
  PHONETIC_ALPHABET_IPA = 1;
  PHONETIC_ALPHABET_SAMPA = 2;
}

// Phoneme string format
// Default: PHONEME_PLAIN
enum PhonemeFormat {
  PHONEME_INVALID = 0;
  PHONEME_PLAIN = 1;
  // Carnegie Mellon University phonetic dictionary format; not yet implemented,
  // suitable for dictionary transcriptions.
  // PHONEME_CMU = 2;
}

// Dialect for the transcription.
// Default: DIALECT_STANDARD
enum Dialect {
  DIALECT_INVALID = 0;
  DIALECT_STANDARD = 1;
  DIALECT_NORTH = 2;
}

// What model to use for transcribing: fast or high-quality.
// Default: MODEL_LSTM 
enum G2PModel {
  MODEL_INVALID = 0;
  // slow, high quality
  MODEL_LSTM = 1;
  // fast, medium quality - not yet implemented
  // MODEL_THRAX = 2;
}

// Possible ABI versions
enum ABI_VERSION {
  option allow_alias = true;
  ABI_VERSION_INVALID = 0;
  ABI_VERSION_000100 = 0x000100;
  ABI_VERSION_CURRENT = 0x000100;
}

// Describes the currently running ABI version of the server
message AbiVersionResponse {
  ABI_VERSION  version = 1;
}
