syntax = "proto3";

package com.grammatek.text_preprocessing;
/*

Messages for TTS frontend pipeline, containing requests and responses for different requirements:
  - a complete text preprocessing pipeline returning a phonetic representation of the input
  - normalizer request, returning a tts-normalized version of the input
  - text-cleaning request, returning a cleaned version of the input, i.e. the input without any non-valid characters
  and where defined sets of characters have been replaced by other characters
  - g2p request, returning a phonetic representation of the input

  Some parameters:
  - for text-cleaning, parameters that deviate from the default settings can be included in the request message
  - for complete pipeline and normalizing, the normalizer domain can be included in the request message, as well
  as a boolean to indicate if a spell checker should be run on the normalized output
  - for complete pipeline and g2p, parameters for g2p can be included in the message: which alphabet should be used
  and if the transcripts should be syllabified and contain stress labels

 */

/*
Request a complete preprocessing pipeline from raw text to phonetic representation
 */
message PreprocessRequest {
  string content = 1;
  TextCleanerParams params = 2;
  NormalizationDomain domain = 3;
  PhonemeDescription description = 4;
}

message PreprocessedResponse {
  string processed_content = 1;
  repeated TranscribedTokenList tokens = 2;
  PhonemeDescription description = 3;
}

message TranscribedTokenList {
  oneof tokens {
    TranscribedToken transcribed = 1;
    TagToken tag = 2;
  }
}

/*
Request phonetic transcription of the input text. Same response as PreprocessRequest.
Only use G2PRequest for input that you know that is normalized for the G2P module.
 */
message G2PRequest {
  string content = 1;
  PhonemeDescription description = 2;
}

/*
Request a normalizer pipeline from raw text to tts-normalized text.
 */
message NormalizeRequest {
  string content = 1;
  TextCleanerParams params = 2;
  NormalizationDomain domain = 3;
  bool do_spellcheck = 4; // default False
}

message NormalizedResponse {
  string processed_content = 1;
  repeated NormalizedTokenList tokens = 2;
  NormalizationDomain domain = 3;
  bool is_spellchecked = 4;
}

message NormalizedTokenList {
  oneof tokens {
    NormalizedToken normalized = 1;
    TagToken tag = 2;
  }
}

/*
Request text-cleaning from raw text to clean text.
 */
message TextCleanRequest {
  string content = 1;
  // if text cleaner should deviate from default settings, set the corresponding parameters
  TextCleanerParams params = 2;
}

message TextCleanResponse {
  string processed_content = 1;
  repeated CleanTokenList tokens = 2;
}

message CleanTokenList {
  oneof tokens {
    CleanToken cleaned = 1;
    TagToken tag = 2;
  }
}

/*
The basic information on a non-processed token from an input text.
 */
message Token {
  string name = 1;  // the token string
  int32 index = 2;
  int32 span_from = 3; // char index in original text
  int32 span_to = 4;   // last char index, excluding, in original text
}

/*
Processed tokens. We add an index field to each processing step, since an original token can result in more
than one processed tokens.
 */

/*
Clean token. Should not contain any characters later processing steps cannot handle.
 */
message CleanToken {
  Token original_token = 1;
  string name = 2;
  int32 index = 3;
}

/*
Normalized token. Should not contain any digits or symbols not processable by a g2p module.
A normalized token might have been processed by a spell checker.
 */
message NormalizedToken {
  CleanToken clean_token = 1;
  string name = 2;
  int32 index = 3;
  NormalizationDomain domain = 4;
}

/*
Transcribed token. A phonetic representation of a normalizedToken.
 */
message TranscribedToken {
  NormalizedToken normalized_token = 1;
  string name = 2;
  int32 index = 3;
  PhonemeDescription description = 4;
}

/*
Tag token. Representing an SSML or another kind of xml-tag.
If both start and end are set to False (default), the token is a stand-alone tag without a
corresponding closing tag.
 */
message TagToken {
  string name = 1;
  int32 index = 2;
  bool ssml_start = 3; // default: False
  bool ssml_end = 4; // default: False
}

/*
Parameter messages for different requests
 */

/*
Parameters for the text cleaner. Default values are given for each field, thus
only necessary to provide these parameters if the deviate from the defaults.
 */
message TextCleanerParams {
  map<string, string> char_replacement = 1; // default: empty map
  string emoji_replacement = 2; // default: '.' -> TODO: define string message
  string punct_replacement = 3; // default: ''
  repeated string alphabet= 4; // default: None (empty)
  repeated string punct_set = 5; // default: None (empty)
  repeated string preserve_string = 6; // default: None (empty)
  bool preserve_emojis = 7; // default: False
  bool clean_emojis = 8; // default: False
  bool delete_labelled_translations = 9; // default: False
}

/*
Parameters for requests containing g2p.
Describes the phoneme string: alphabet, output format, syllabification and labeling.
Default: X-SAMPA in plain format without syllabification and stress labeling
 */
message PhonemeDescription {
  // phoneme alphabet (IPA, SAMPA, ...)
  PhoneticAlphabet alphabet = 1;
  // The format of the phoneme string (CMU, plain, ...)
  PhonemeFormat format = 2;
  bool syllabified = 3;
  bool stress_labels = 4;
}

/*
Parameters for requests containing normalization.
Possible normalization domains. Default OTHER
 */
enum NormalizationDomain {
  NORM_DOMAIN_INVALID = 0;
  NORM_DOMAIN_SPORT = 1;
  NORM_DOMAIN_OTHER = 2;
}

/*
Phonetic Alphabet. Default: X-SAMPA
 */
enum PhoneticAlphabet {
  PHONETIC_ALPHABET_INVALID = 0;
  PHONETIC_ALPHABET_IPA = 1;
  PHONETIC_ALPHABET_SAMPA = 2;
}

/*
Phoneme string format. Default: plain
 */
enum PhonemeFormat {
  PHONEME_INVALID = 0;
  PHONEME_CMU = 1;
  PHONEME_PLAIN = 2;
}

enum ABI_VERSION {
  ABI_VERSION_INVALID = 0;
  ABI_VERSION_CURRENT = 0x010000;
}

message AbiVersionResponse {
  ABI_VERSION  version = 1;
}